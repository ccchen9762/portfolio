{
    "projects": [
        {
            "title": "Inverse-Kinematics", 
            "time": "2022 Spring",
            "link": "",
            "images": [
                {
                    "src": "IK1.jpg", 
                    "alt": "img1",
                    "type": "img"
                },
                {
                    "src": "https://www.youtube.com/embed/FYHRDi22t98", 
                    "alt": "vid1",
                    "type": "video"
                }
            ],
            "description": "Implemented forward and inverse kinematics using pseudo inverse and damped least square method, and using linear blending and dual quaternion for skinning when moving the handle, using using C++, OpenGL."
        },
        {
            "title": "Angular-stock-search-website", 
            "time": "2022 Spring",
            "link": "https://myfirstnodejs-343823.wm.r.appspot.com/search/AAPL",
            "images": [
                {
                    "src": "stock_search1.jpg", 
                    "alt": "img1",
                    "type": "img"
                }
            ],
            "description": "An responsive AJAX stock search website using Angular front-end and Node.js back-end, check the website here!"
        },
        {
            "title": "Motion-capture-interpolation", 
            "time": "2022 Spring",
            "link": "",
            "images": [
                {
                    "src": "mocap_interpolation1.jpg", 
                    "alt": "img1",
                    "type": "img"
                },
                {
                    "src": "https://www.youtube.com/embed/vHeksIJ06DM", 
                    "alt": "vid1",
                    "type": "video"
                }
            ],
            "description": "Interpolated motion capture keyframe with linear Euler angle, Bezier Euler angle, quaternion SLERP, andBezier quaternion SLERP, using C++, OpenGL."
        },
        {
            "title": "Physically-based-simulation", 
            "time": "2022 Spring",
            "link": "",
            "images": [
                {
                    "src": "jello_cube1.jpg", 
                    "alt": "img1",
                    "type": "img"
                },
                {
                    "src": "https://www.youtube.com/embed/s-GF7p1fJ0g", 
                    "alt": "vid1",
                    "type": "video"
                }
            ],
            "description": "A spring-mass system for simulating jello cube bouncing inside an area, and applied penalty based contact when collision. Using C++, OpenGL."
        },
        {
            "title": "Lord-of-the-Land", 
            "time": "2022 Spring",
            "link": "https://play.unity.com/mg/other/lord-of-the-land",
            "images": [
                {
                    "src": "landlord1.jpg", 
                    "alt": "img1",
                    "type": "img"
                }
            ],
            "description": "An Unity simulation game made in Global Game Jam 2022(USC games). Play WebGL version here! Coworking, using Unity."
        },
        {
            "title": "Ray-Tracer", 
            "time": "2021 Fall",
            "link": "",
            "images": [
                {
                    "src": "ray_tracer1.jpg", 
                    "alt": "img1",
                    "type": "img"
                },
                {
                    "src": "ray_tracer2.jpg", 
                    "alt": "img2",
                    "type": "img"
                },
                {
                    "src": "ray_tracer3.jpg", 
                    "alt": "img3",
                    "type": "img"
                }
            ],
            "description": "Backward Ray-tracer with multiple reflections and soft shadows. Every pixel is rendered by averaging 4 rays for anti-aliasing. View the Github page here! Using OpenGL, C++."
        },
        {
            "title": "Catmull-Rom-Splines", 
            "time": "2021 Fall",
            "link": "",
            "images": [
                {
                    "src": "roller_coaster1.jpg", 
                    "alt": "img1",
                    "type": "img"
                },
                {
                    "src": "https://www.youtube.com/embed/1xIiHSqa4d4", 
                    "alt": "vid1",
                    "type": "video"
                }
            ],
            "description": "A roller coaster which rails are generated by Catmull-Rom-Splines and drawn by using recursive subdivision running in an immersive surrounding environment. View the Github page here! Using OpenGL, C++."
        },
        {
            "title": "JPEG-Compression", 
            "time": "2017 Fall",
            "link": "",
            "images": [
                {
                    "src": "jpeg1.jpg", 
                    "alt": "img1",
                    "type": "img"
                },
                {
                    "src": "jpeg2.jpg", 
                    "alt": "img1",
                    "type": "img"
                }
            ],
            "description": "Implemented JPEG encoder and decoder on grayscale raw files. The images on the left is encoded and decoded with quality factor of 50. View the Github page here! Using C++."
        },
        {
            "title": "Java-Mario-Like-Game", 
            "time": "2016 Spring",
            "link": "",
            "images": [
                {
                    "src": "dashan1.jpg", 
                    "alt": "img1",
                    "type": "img"
                },
                {
                    "src": "https://www.youtube.com/embed/sU1U4YHqqjw", 
                    "alt": "vid1",
                    "type": "video"
                }
            ],
            "description": "A 2D Mario-like game made with Lightweight Java Game Library. View the Github page here! Using Java."
        }
    ]
}